name: (Generic) Nuitka

on:
  workflow_dispatch:
    inputs:
      THE_NAME:
        description: Repository name (without your username)
        type: string
        required: true

      MAIN_PY:
        description: Python main filename
        type: string
        required: true
        default: main.py

      NO_WINDOWS:
        description: Do not build for Windows, just Linux
        type: boolean
        required: true
        default: false

jobs:
  job1:
    name: Build and upload executable binary
    strategy:
      matrix:
        os: [ubuntu-20.04,windows-2019 ]

    runs-on: ${{ matrix.os }}
    steps:
      - name: Check if on Windows
        if: ${{ contains(matrix.os,'windows') == true && inputs.NO_WINDOWS == true }}
        run: exit 1

      - uses: actions/checkout@v4
        with:
          repository: "${{ github.repository_owner }}/${{ inputs.THE_NAME }}"
          ref: main
          token: ${{ secrets.GH_TOKEN }}
          path: source-code
          sparse-checkout: .

      - name: Setup Python
        uses: actions/setup-python@v3
        with:
          python-version: "3.9.6"

      - name: Setup Python (req.txt)
        if: ${{ hashFiles('req.txt') != '' }}
        working-directory: source-code
        run: |
          pip install -r req.txt
          mkdir out

      - name: Setup Python (install Nuitka)
        run: |
          pip install nuitka

      - name: Build for Linux
        if: ${{ contains(matrix.os,'windows') == false }}
        working-directory: source-code
        run: |
          python -m nuitka --onefile --onefile-no-compression --assume-yes-for-downloads "${{ inputs.MAIN_PY }}" --output-dir="the-output" --output-filename="${{ inputs.THE_NAME }}"
          mv "the-output/${{ inputs.THE_NAME }}" "the-output/${{ inputs.THE_NAME }}.${{ matrix.os }}"
          find the-output

      - name: Build for Windows
        if: ${{ contains(matrix.os,'windows') == true }}
        working-directory: source-code
        run: |
          python -m nuitka --onefile --onefile-no-compression --assume-yes-for-downloads "${{ inputs.MAIN_PY }}" --output-dir="the-output" --output-filename="${{ inputs.THE_NAME }}.exe"
          mv "the-output/${{ inputs.THE_NAME }}.exe" "the-output/${{ inputs.THE_NAME }}.${{ matrix.os }}.exe"
          ls

      - uses: actions/upload-artifact@v3
        with:
          name: "${{ matrix.os }}"
          if-no-files-found: error
          path: |
            ./source-code/the-output/${{ inputs.THE_NAME }}.${{ matrix.os }}
            ./source-code/the-output/${{ inputs.THE_NAME }}.${{ matrix.os }}.exe

  job2:
    name: Create the release
    needs: job1

    runs-on: ubuntu-latest
    outputs:
      the_upload_url: ${{ steps.CreateRelease.outputs.upload_url }}

    steps:
    - name: Get date
      uses: StarUbiquitous/command-output@v1.0.0
      id: Today
      with:
        run: date +%Y-%m-%d-%H-%M-%S

    - name: Display date
      run: echo "Today is ${{ steps.today.outputs.stdout }}"

    - name: Create release
      id: CreateRelease
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
      with:
        tag_name: "${{ steps.Today.outputs.stdout }}"
        release_name: "${{ steps.Today.outputs.stdout }}"
        draft: false
        prerelease: false

  job3:
    name: Attach artifact as an asset
    needs: job2

    strategy:
      max-parallel: 1
      matrix:
        binary: [ubuntu-20.04,windows-2019 ]

    runs-on: ubuntu-latest
    steps:

      #- name: Set name (Linux)
      #  if: ${{ contains(matrix.binary,'windows') == false }}
      #  run: |
      #    echo "THE_FILENAME=${{ inputs.THE_NAME }}.${{ matrix.binary }} >> $GITHUB_ENV"

      #- name: Set name (Windows)
      #  if: ${{ contains(matrix.binary,'windows') == true }}
      #  run: |
      #    echo "THE_FILENAME=${{ inputs.THE_NAME }}.${{ matrix.binary }}.exe >> $GITHUB_ENV"

      - name: Set Name
        id: BlobName
        uses: StarUbiquitous/command-output@v1.0.0
        with:
          run: |
            CHARS=$(printf ${{ matrix.binary }}|grep "windows|wc -c")
            if [ $CHARS -eq 0 ]; then
            	echo "${{ inputs.THE_NAME }}.${{ matrix.binary }}" >> "$GITHUB_OUTPUT"
            else
            	echo "${{ inputs.THE_NAME }}.${{ matrix.binary }}.exe" >> "$GITHUB_OUTPUT"
            fi

      - name: Download artifact (Linux)
        uses: actions/download-artifact@v3
        with:
          name: ${{ matrix.binary }}
          path: ${{ steps.BlobName.outputs.stdout }}

      - name: Attach the artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

        with:
          upload_url: ${{ needs.job2.outputs.the_upload_url }}
          asset_path: "$THE_FILENAME"
          asset_name: "$THE_FILENAME"
          asset_content_type: application/octet-stream


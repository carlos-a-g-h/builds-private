name: (Generic) Nuitka

on:
  workflow_dispatch:
    inputs:
      THE_NAME:
        description: Repository name (without your username)
        type: string
        required: true

      MAIN_PY:
        description: Python main filename
        type: string
        required: true
        default: main.py

      NO_WINDOWS:
        description: No Windows EXE
        type: boolean
        required: true
        default: false

jobs:
  build-binaries:
    name: Build binary/executable
    strategy:
      matrix:
        os: [ubuntu-20.04,windows-2019 ]

    runs-on: ${{ matrix.os }}
    steps:
      - name: Check if on Windows
        if: ${{ contains(matrix.os,'windows') == true && inputs.NO_WINDOWS == true }}
        run: exit 1

      - uses: actions/checkout@v4
        with:
          repository: "${{ github.repository_owner }}/${{ inputs.THE_NAME }}"
          ref: main
          token: ${{ secrets.GH_TOKEN }}
          path: source-code
          sparse-checkout: .

      - name: Setup Python
        uses: actions/setup-python@v3
        with:
          python-version: "3.9.6"

      - name: Setup Python (req.txt)
        if: ${{ hashFiles('req.txt') != '' }}
        working-directory: source-code
        run: |
          pip install -r req.txt
          mkdir out

      - name: Setup Python (install Nuitka)
        run: |
          pip install nuitka

      - name: Create a Linux binary
        if: ${{ contains(matrix.os,'windows') == false }}
        working-directory: source-code
        run: |
          python -m nuitka --onefile --onefile-no-compression "${{ inputs.MAIN_PY }}" --output-dir="the-output" --output-filename="${{ inputs.THE_NAME }}"
          mv -v "the-output/${{ inputs.THE_NAME }}" "the-output/${{ inputs.THE_NAME }}.${{ matrix.os }}"
          find the-output

      - name: Create a Windows executable
        if: ${{ contains(matrix.os,'windows') == true }}
        working-directory: source-code
        run: |
          python -m nuitka --onefile --onefile-no-compression "${{ inputs.MAIN_PY }}" --output-dir="the-output" --output-filename="${{ inputs.THE_NAME }}.exe"
          mv -v "the-output/${{ inputs.THE_NAME }}.exe" "the-output/${{ inputs.THE_NAME }}.${{ matrix.os }}.exe"
          ls

      - uses: actions/upload-artifact@v3
        with:
          name: "${{ inputs.STEM }}-${{ matrix.os }}"
          if-no-files-found: error
          path: |
            ./source-code/the-output/${{ inputs.THE_NAME }}.${{ matrix.os }}
            ./source-code/the-output/${{ inputs.THE_NAME }}.${{ matrix.os }}.exe
